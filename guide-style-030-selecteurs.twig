{% embed './views/partials/_recommandation.twig' %}
	{% set recId      = 'selecteurs' %}
	{% set recVersion = '1.0.0-alpha.2' %}
	{% block recTitle %}
				Choisir ses sélecteurs CSS
	{% endblock %}
	{% block recContent %}
			<aside class="bonus">
				<p>
					Un élément peut être désigné par un <code class="language-css token selector">#identifiant</code>,
					par un type défini par son nom de <code class="language-css token selector">balise</code>,
					ou par diverses qualités définies par ses attributs ou ses propriétés.
					Pour sélectionner ces qualités on trouve notamment des
					<code class="language-css token selector">.classes</code>
					et des <code class="language-css token selector">:pseudo-classes</code>.
					L’identifiant fonctionne un peu comme un nom propre,
					le type comme un nom commun
					et les diverses qualités comme des adjectifs ou des compléments du nom.
				</p>
			</aside>
			<p>
				Les règles suivantes s’appliquent à la rédaction des sélecteurs, par ordre
				décroissant d’importance et sous réserve du niveau de compatibilité recherché.
			</p>
			<ol>
				<li>
					<p>
						Quand un élément peut être défini par un type, une balise,
						il est <abbr title="" class="rfc2119">recommandé</abbr>
						de préférer cette solution aux solutions suivantes ou à tout autre.
					</p>
					<aside class="bonus">
						<p>
							Par exemple, utiliser de préférence une balise sémantique
							<code class="language-html">&lt;article></code> plutôt
							qu’un attribut ARIA (<code class="language-html no-wrap">&lt;… role="article"></code>)
							ou qu’une classe (<code class="language-html no-wrap">&lt;… class="article"></code>).
						</p>
						<p>
							Comme il est possible que plusieurs balises <code class="language-html">&lt;html></code>
							apparaissent dans un document XML ou HTML 5, cette règle ne s’applique pas
							au type <code class="language-css token selector">html</code> quand il s’agit
							de désigner le document entier.
							Dans ce cas, on préférera <code class="language-css token selector">:root</code>.
						</p>
					</aside>
				</li>
				<li>
					<p>
						Quand un élément peut être défini par une pseudo-classe décrivant un état
						ou une propriété,
						il est <abbr title="" class="rfc2119">recommandé</abbr>
						de préférer cette solution aux solutions suivantes ou à tout autre.
					</p>
					<p>
						À l’exception de <code class="language-css token selector">:root</code>,
						cette règle ne concerne pas les pseudo-classes dites structurelles qui indiquent
						un emplacement dans l’arborescence du document.
					</p>
					<aside class="bonus">
						<p>
							Par exemple, on préférera
							<code class="language-css token selector">:read-only</code>
							à <code class="language-css token selector">[readonly]</code>
							ou à une classe définie pour l’occasion et gérée par un script.
						</p>
						<p>Les principales pseudo-classes concernées sont :</p>
						<ul>
							<li>
								État dynamique ou d’interaction :
								<code class="language-css token selector">:link</code>,
								<code class="language-css token selector">:visited</code>,
								<code class="language-css token selector">:active</code>,
								<code class="language-css token selector">:hover</code>,
								<code class="language-css token selector">:focus</code>,
								<code class="language-css token selector">:target</code> ;
							</li>
							<li>
								Possibilités de saisie :
								<code class="language-css token selector">:disabled</code>,
								<code class="language-css token selector">:enabled</code>,
								<code class="language-css token selector">:read-write</code>,
								<code class="language-css token selector">:read-only</code> ;
							</li>
							<li>
								État d’une saisie :
								<code class="language-css token selector">:blank</code>,
								<code class="language-css token selector">:checked</code>,
								<code class="language-css token selector">:default</code> ;
							</li>
							<li>
								État de validation d’une saisie :
								<code class="language-css token selector">:invalid</code>,
								<code class="language-css token selector">:valid</code>,
								<code class="language-css token selector">:required</code>,
								<code class="language-css token selector">:optional</code> ;
							</li>
							<li>
								Propriétés de structure :
								<code class="language-css token selector">:root</code>,
								<code class="language-css token selector">:empty</code>,
								<code class="language-css token selector">:lang()</code>.
							</li>
						</ul>
					</aside>
				</li>
				<li>
					<p>
						Quand un élément peut être défini par des attributs ou classes
						déjà existants
						pour sa sémantique, son fonctionnement ou son accessibilité,
						il est <abbr title="" class="rfc2119">recommandé</abbr>
						de préférer cette solution aux solutions suivantes ou à tout autre.
					</p>
					<p>
						C’est <abbr title="" class="rfc2119">recommandé</abbr>, de même,
						quand de tels attributs pourraient être ajoutés sans difficulté particulière.
					</p>
					<aside class="bonus">
						<p>
							Par exemple, on préférera utiliser
							<code class="language-css token selector">[rel~=bookmark]</code>
							pour un auto-lien, plutôt que de créer une classe,
							<code class="language-css token selector">.self-link</code>
							(un auto-lien est  un lien placé dans le titre d’une section et qui
							renvoie à cette section elle-même).
						</p>
						<p>
							De même, on préférera utiliser l’attribut
							<code class="language-css token selector">[open]</code> pour suivre
							l’état d’un élément <code class="language-html">&lt;details></code>,
							qui a l’avantage d’être mis à jour automatiquement par le navigateur,
							plutôt que de créer artificiellement une classe
							(<code class="language-css token selector">.open</code>) qu’il faudrait
							mettre à jour à l’aide d’un script.
						</p>
						<p>
							Pour la dimension sémantique, cette règle favorise en particulier les
							<em>microformats</em>, qui sont une extension possible du HTML 5
							qui s’appuie sur des noms de classes standardisés.
							On pourra donc utiliser par exemple
							<code class="language-css token selector">.h-entry</code> pour
							désigner un contenu daté et
							<code class="language-css token selector">.h-entry .p-author</code>
							pour désigner son auteur,
							plutôt que de créer des désignations spécifiques à tel ou tel site.
						</p>
						<p>
							Il est également intéressant d’utiliser les attributs ARIA,
							qui précisent la fonction (p. ex.
							<code class="language-css token selector">[role=toolbar]</code>)
							ou l’état (p. ex.
							<code class="language-css token selector">[aria-busy=true]</code>)
							d’éléments pour améliorer l’accessibilité d’une interface.
						</p>
						<p>
							Cette règle s’applique aussi aux composants web ou à leurs
							éléments, souvent associés à des classes ou attributs spécifiques.
						</p>
						<p>
							Pour certains sélecteurs rares, il peut être utile d’ajouter un commentaire
							à la feuille de style pour indiquer sa signification ou renvoyer vers une
							documentation.
						</p>
					</aside>
				</li>
				<li>
					<p>
						Quand les règles précédentes ne s’appliquent pas,
						on <abbr title="" class="rfc2119">peut</abbr>
						désigner un élément à l’aide d’une classe ou d’un attribut personnalisés.
					</p>
					<p>
						(à compléter: attributs personnalisés quand utile à des scripts)
					</p>
					<p>
						(à compléter: nommer une classe personnalisée: sémantique, fonction, état, structure)
					</p>
					<p>
						(à compléter: préférer le niveau le plus haut)
					</p>
				</li>
				<li>
					<p>
						Le nom des identifiants, des classes et des attributs personnalisés
						<abbr title="" class="rfc2119">doit</abbr>
						être défini et utilisé de façon sensible à la casse
						(différence minuscules/majuscules).
					</p>
					<p>
						(à compléter: kebab-case/camelCase pour les attributs personnalisés)
					</p>
				</li>
			</ol>
	{% endblock recContent %}
	{% block recRationale %}
				<ol>
					<li>
						<p>
							(à rédiger)
						</p>
					</li>
				</ol>
	{% endblock recRationale %}
{% endembed %}